name: Deploy Frontend to S3 + CloudFront

on:
  push:
    branches: [ "main" ]
    paths:
      - "package.json"
      - "package-lock.json"
      - "vite.config.*"
      - "webpack.*"
      - "src/**"
      - "public/**"
      - "build/**"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch:

# Evita despliegues solapados en main
concurrency:
  group: "deploy-frontend-main"
  cancel-in-progress: false

permissions:
  id-token: write   # OIDC
  contents: read

env:
  AWS_REGION: us-east-2
  S3_BUCKET: learnia-frontend-assets1
  CLOUDFRONT_DISTRIBUTION_ID: E15VDYJ5PHGZMY
  NODE_VERSION: "20"
  BUILD_DIR: "build"   # tu árbol ya genera 'build/'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::974724840334:role/gh-actions-frontend-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: WhoAmI (debug)
        run: aws sts get-caller-identity

      # 1) /static (hash en nombre) -> caché larga. No borrar versiones previas.
      - name: Upload /static (long cache, keep history)
        run: |
          aws s3 sync "$BUILD_DIR/static" "s3://${S3_BUCKET}/static" \
            --cache-control "public,max-age=31536000,immutable"

      # 2) Raíz (HTML y manifiestos sin hash) -> no-cache
      - name: Upload root files (no-cache)
        run: |
          aws s3 cp "$BUILD_DIR/index.html" "s3://${S3_BUCKET}/index.html" \
            --cache-control "no-cache, no-store, must-revalidate"
          if [ -f "$BUILD_DIR/asset-manifest.json" ]; then
            aws s3 cp "$BUILD_DIR/asset-manifest.json" "s3://${S3_BUCKET}/asset-manifest.json" \
              --cache-control "no-cache, no-store, must-revalidate"
          fi

      # 3) Invalidación mínima (barata y suficiente)
      - name: Invalidate CloudFront (HTML y raíz)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
            --paths "/index.html" "/asset-manifest.json" "/"
